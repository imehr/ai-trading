at support. And then right out under support. This looks beautiful to me. If I were to go to work right now, I would feel very comfy. Because I'm just going to plop this function into my risk bot now. And be able to just know for a fact that, hey, I'm only going to enter the trade if I can get a great deal. And then if I hit my max loss, stop loss, whatever, then I will exit. It will exit automatically for me. So this is pretty great. Now let's go ahead and try this for the opposite one. The cell that makes sure everything looks good on the cell side. So let's run this. Let's say cell, it should cancel the orders. Cancel it. Boom, boom, boom. Wow. That is beautiful. So these are the new figures. That refresh here. Okay, boom. I like those cell orders too. So we have two, which is about 20% of my size. And then a little bit higher. We have four. And then a little bit higher. We have another one. So boom, boom, boom. Just like that. That's how I'm going to enter my trades if I was about to go to work. Now, obviously this isn't necessarily the best way. It could be a better way. Maybe we'll just do two orders. I'll test it out with two orders. I'll test it out with three orders. Maybe I'll do 60% of size here and make it just two orders instead of having this midpoint one. And in order to do that, that's pretty simple. I would just say, hey, I want that to be that. And I want to make this 0.5, this 0.5. And then let's go ahead and get rid of that. Get rid of that. So I'm just making it two orders now. And here I can just delete that. This is even more conservative way out there to do it. Now I can probably put this in a way that I don't need to get rid of all of that. But I can probably do that just on the next video. If you want me to continue this and keep optimizing with you, just let me know. I'm happy to help. I think that's probably good for this video. I don't know how long we've been going. But I just showed you how to trade from work. I trade while you're doing something else. So if you do appreciate that, make sure to stick around. You catch my next video. But other than that, I'll see you in the metaverse. I built a trading bot and it absolutely changed my life. I don't know about you, but when I used to trade by hand, I would get emotional. And things like, I would see a green bar here and be like, oh, I need to get in. And then maybe you would go up one more green bar. But oh, it's going to the moon and then dumps on me like this. Or for example, if I'm shorting, I would see this big red bar and say, oh, I need to get in on this. I need to short this and then boom, it would go green again. So I don't know if this is happened to you. But ever since I started to automate my strategy and build bots instead of trying to trade by hand, I've had much, much better results. And I've been able to save a lot of my portfolio here in this treacherous bear market. So what I want to do in this video is just bring you along with me and show you exactly how I do this. I create new bots every day or I'm tweaking a past bot. And there is something I want to build here today with you that is pretty easy to do. It might be a little bit of a challenge if you're new, but the thing is, is I'm not like a super smart guy. I'm just a regular dude that knew, hey, I'm a decent trader, but I could be way better if I removed my emotions. You know, some days the emotions just get in your way and you're just not able to trade. So my thought was, hey, if I could put all of these rules I have in my head into an algorithm or a bot, then it could just trade for me and it wouldn't have emotions. When it's supposed to sell it, actually sells. When it's supposed to buy it, actually buys. Right? So you can do cool things like put an SMA or the VWOP and all that good stuff. And then just tell the bot to buy or sell when you want it to. So like I said, I do this every single day and I probably code for four to six hours a day on my trading algos. And I thought, hey, you know, nobody else is really teaching this stuff out there. And I've learned everything online and when I come across something that is hard to learn, I know if it's hard to learn for me, you know, I've been spending a lot my whole life online trying to learn different types of things. And when I find something that's hard for me to learn, well, I assume that it's going to be hard for others as well. And the way I look at it is if I just code and show you what I'm doing in the day, you'll see that I'm just a regular dude. I didn't go to school for coding, engineering, all that good stuff. I don't have a math degree or anything like that. I probably see I'm not like a super smart genius. And in my mind, I thought that coders were all just like super smart geniuses. But at the end of the day, it's just like learning anything else. If you look at these bar charts, I remember when I first started looking at bar charts, I was like, what are these? Like candlesticks charts. I was like, what is it? Okay, green probably means it's going up. I can see that red going down. Yeah, yeah. What are these wicks? What do they mean? So just like anything else, you can learn anything. I'm learning Spanish right now. And Spanish is so much harder to learn than it was to learn how to code because Spanish is different language. The code is in English, which makes it easier, right? Because everything is on Google, you're just a professional Google. So what I'm going to build today is just a simple little bot that allows me to say something like, hey, I want to make a trade of $1,000. And I want it to be on BTC. Or I could say, hey, $1,000 on Ethereum. And then since on all of these exchanges, if I go to my actual themex account, they use contracts. So one contract equals $X. It could be like $5, $4. So what I want to build today is something that does the conversion for me because when you are trading with contracts, the conversion's a little different. It's not just like, hey, I want to buy $1,000 on Ethereum or $1,000 on BTC. It's different. So we have to make a little function today that goes ahead and says, hey, I want to buy and you put in the amount you want to buy. And it will convert to the contracts and then buy yourself based off of that. Now, if you will be watching my other videos, you might be able to piece together what I'm doing here. But I'm building this really interesting bot that has machine learning and all types of different indicators and strategies kind of built into it. It's kind of like a master bot. And what I do is I just build pieces of it here on YouTube. And I follow along if you'd like and see what I'm actually building. So let's go ahead and get started. I have my discord here at the bottom right. Feel free to join that. What I want to do here is I have this file that we've been working on together. And in my other videos, I just want to, if you want to see a screenshot, these are the imports I'm using. So I don't have to go through all this again. These are the imports. These are the variables and inputs. This is how you connect to the exchange. I mean the CCXT. Okay, back in the VMAX. This is where you put your keys in your secret. But I don't show my keys in secret on screen for obvious reasons and make sure to keep your eyes very safe as well. And then let's just start building this because this function here is super important. And I'll explain it again just because I know I didn't explain it very well. Let's call this function dollar contract calculator. And I'll explain it right now. But essentially this converts dollars to contracts. Because I'm going to be contract trading. So I need them to convert dollars to contracts. And let's see here. I can pull up. I'm going to pull up another screen. Okay, there it is. And I want to try to go to my VMAX account. Sorry, I have to pull some of this off screen just because, you know, look at those. Kind of sketch to be sharing things on YouTube because, you know, it's easy to withdraw funds and whatnot with my keys and whatnot. So, be a little careful here. Okay, so let's go ahead here. And this is going to be pretty simple to do. I've been having a hard time, but I want to show you, and I just want to be as transparent as possible. If I show you everything, then you're going to learn with me. If I look here, you can see right here. This is contract. I'm on Ethereum USD. And if I said one contract, you can see it's worth $5.86. But then if I have 10x leverage, it actually costs $59. So, what it needs to do is one, figure out how much one contract is for the symbol. And then two, pull in the leverage being used. Because, for example, if the contract is $5.86, but I'm using 10x leverage, the cost is only going to be $59. So, I need to make sure to say, okay, let's say symbol, equal symbol, we want to pass them the symbol. And if you haven't coded before, don't worry about it. Just watch this because this is how you learn how to code. You know, just like you learn how to speak. You know, your parents probably just didn't teach you how to speak. So, this is how I learn how to code. Just like watch it over and over again. And then eventually try some things. And copy code. Just copy people's code on YouTube. And over time, you're just going to get good at coded. And then it's just like once you know how to code, you can build anything, which is awesome. So, any strategy you have, boom. So, we want to pull in and figure out how much one contract costs in USD. And then get the leverage being used. And then what else should we do? I think that's probably a good start. But I think you understand now, like if I wanted to do, if I wanted to spend, like, for example, $587 in USD is 100 contracts. But then again, I divided by 10 because of my leverage. And that's how much USD would actually do. So, this is kind of tricky to do. I've actually been playing with this a little bit. But let's go ahead and say, femex.fetch. And let's just play around and see what we can get. Fetch, markets, my trades, open high, low closed volume, open orders, orders status, partial balance, permissions, positions, status, takeer. Let's try takeer. And then let's just pass in the symbol. And I believe our symbol up here is the eUSD. Okay? So, let's go ahead and say, takeer equals that. And then let's print takeer. And let's just run contract calculator. Contract, talk. Just like this. And let's put the time dot sleeve just so it doesn't move on to anything else. And this should print out the takeer information. I don't know what that takeer information is. But we shall see in two seconds. Okay. So, the takeer information. Let's go ahead and read through this to figure out if it shows us the price. So, date time, the high, the low, the bid, the bid volume, the ass, the ass volume, the VWAP doesn't look correct. Let's open, close, the change, the percentage, change, the average, the base volume, the info, ask, bid. Okay. So, this looks like the same information just in a different. A different way. Okay. So, I actually don't see what the cost is for one contract. Let's do that. Let's go ahead and try something else. Let's say, theme x. And this is part of coding. Like for me at least. A lot of guests in check in. You got to figure out exactly what, what works and what doesn't. The order book, markets, fetch markets. We can try fetch markets. I don't think this is going to work, but let's go ahead and do this. A little lazy, so I'll mark this one out. But then I'll copy it, paste it here. And we're going to just fetch markets. I think this is going to give us all of the markets, which is going to be a lot. Give it a second. Hmm. Let me re-run it. There it is. Perfect. So, quote size. I wonder if we can get fetch markets just for the symbol. Because that would be super, you know. No? Well, I'll look through this big old thing of JSON here. Let's go ahead and... So this looks like all markets for the contract size and none. And this is a lot. Maybe what we should do is go ahead and say for the markets. Let's put it in a... Put in the app, hand it's different. Put it in the DIA. So let's do that. So... Let's go ahead and say ticker equals just to reset that. And say PD.data.print.fromDictionary. And then we'll pass in the ticker. So what this is going to do is going to make a dictionary out of that. And then we'll pass in the ticker. And then we'll pass in the ticker. So what this is going to do is going to make a dictionary out of that. Okay. Looks like there's 500 lines. Okay, good. I see the ETH-USD actually right here. So how do you do... How do you pick a column? I just want the column that has... has ETH-USD. So... Hmm. Let me think about this for a second. I've done this many times. Essentially I just want to grab this column here. So where symbol equals... symbol equals ETH-USD... that would be pretty tight. If I could just get that. I've not done that multiple times. I should just look in here. For example, on my half. Where symbol equals... I think we've actually done this here in this file. So let's go ahead and look for that. Fill the figures and close the F. Let's fill it. Okay. So... Let's try this. Let's say... Excuse me. So let's say... symbol DIA equals ticker. Ticker dot look where ticker symbol. I think it was equals symbol. Equal symbol. And then... I think I need to see this again actually. It's not quite sure what the thing said. Okay. What are the columns called? I can't see it. Oh, ID. What is this? Actually, ID. So ID equals symbol. I just want that. Let's just Google it real quick. Get data frame where column equals something. How do I select a subset? And this is coding for me at least. I mean, just Google banks because I like to joke. This is just like a pre-interprofessional. Professional... Really. So... Okay, I like that. That's a good way. So let's try that. And I'll do that by saying... Boom. Let's say symbol DIA equals ticker where ticker ID equals symbol. And then print symbol DIA. See if this works out. Let's do all that. Okay. Nice. Perfect. So we first get the regular DIA. I'll just delete that for now. Because we don't need any more. Now we have this information. And... Let's go ahead and say... I only want now the info. I only want to print the info column of this symbol DIA. So that will be info equals symbol DIA. Where it says info. And then let's print info. Okay. So we have the info which is awesome. Now what's in that info? Is the question. Let's go ahead and open this up a little bit. Name on that symbol DIA. Okay. So how do we go DIA to JSON? That's what I need to figure out. Now, DIA value to JSON. So we go DF to JSON. Hmm. What we can do... JSON equals info that 2 JSON. Orient equals... I don't know what that is. Info. Let's print JSON. Let's see if this works. Go ahead and check. Never heard anybody. Okay. That's it. Info. JSON equals info DIA. 2 JSON. Info. So info. Where's that record coming from? On here. Now, whether you get from DF to JSON is a string. What if I did it without orient? Okay. Perfect. Okay. Let's go ahead and read through some of this. Dang. This is a lot. Shoo. I wonder what records is in this example. I don't know if you can see this. Oh, maybe I just use records. Orient equals records. And then let's try this out here. Add this stuff they put in. 1 minus 1 dot replace. And then put in these curly things. Back curly things. And then say, karma. Cull it again. That curly thing. This curly thing. Okay. See if that works. Let me do it. Okay. It works. Awesome. So now we can go ahead and say, let's talk time. Carving all this. Symbol. Let's go ahead and just make another file here. Let's call it random dot JSON. And in this file, I'm going to paste that. And then I'm going to format it. Format document. Okay. Perfect. Look at that. Imagine. Remember, I don't know how I code. I guess I do not. But this is not really not that hard. So I can see that the contract size is 0.005. That could be useful. Because then we can get the price times the contract size. Take size. You know what price? Maximum order. Description. Initial margin. So remember, I'm trying to be able to say, I want $1,000 and convert it to the contract. Initial margin. Thanks, Carving. Okay. Well, I think we just go in here and get the contract size of them. Right? So let's go ahead and do that. So JSON contract. I don't know if it was snake case or what. Contract size. Say contract size equals that. And then print contract size. So I'm going to delete not the meat foot. Mark out all of these. Notice distractions and see if this works. Okay, I just did something wrong here. And JSON equals that. Print JSON. Contract size. We can use these. JSON may be zero. Contract size. Try that out. Okay, so string it as these must be integer. Let's turn this JSON. JSON df equals JSON dot, no sorry. PD that data frame. PD. Data frame. From dictionary. And then we'll put in the JSON. And then print JSON df. I was doing this. This JSON isn't set up too good. But we'll see. Data frame construct. Data frame construct or not properly called. Okay, so it looks like the constructors is not. Formatted correctly. But what I do want to chest right now is. I'm going to pause this. Let's just do a little math here. Because we know that before we waste more time, I want to see the math equation here and make sure it sets up. So 0.005. Multiply by the price. 1.173. 3.11 equals price per contract equals. And then let's print price per contract. And let's see what happens here. See if this is the actual price per contract. 586. All right, sweet. We figured out the price per contract. Now we just need to be able to do this programmatically always. Throughout any symbol. So as you can see, it says 5.85. And over here is 5.86. So we figured out the process in order to get the price per contract, which is awesome. We just need to figure out how to go ahead and get that information from where it's at. Cool. Take it here. And we know we can get this JSON here. But the JSON is not set up correctly. So maybe I messed it up here. Maybe there needs to be a comma elsewhere. Let's go ahead and just make sure that this is correct. So we need to fill 2Json-oriented records. 1, 2, negative 1, dot replace. And then it was a quote, bracket, comma, bracket, comma, quote, bracket, space, comma. Okay, so this. Oh, look at this. Let's try that. Looks like a newer version of pandas here. Let's do this again. So let's just say JSON. Json, or what was the default info, dot 2Json. And then we'll put it pass in the temp JSON. The info, right? And then orient equals records. And then lines equals true. And then let's name this JSON equals. And then let's say print JSON. Get that work. At least we know where the data is now. That's a good thing. Okay, method is not inter-rible. Okay, make sure I did this correctly. I'm going to find another approach to this. Because I'm not quite sure. I'm just kind of looking over here at this information. So I think there's got to be a easier way to do this price per contract. That's what we need. So let's just go ahead and delete all this. Let's print info again. Because this is the column we need. Let's go ahead and open this up a little more. So symbol code. Info dot values. Okay, that looks better. Now it looks like a list. So let's say info equals info dot values. And then info zero equals info. Because I think that will get as inside the list. Yes, perfect. And then we need to get to contract size. Contract size equals info dot contract size. And let's go ahead and print contract size. Oh, there we go. We got it. So 0.005E. Now we just need to remove the ETH part. So that's pretty easy to do. How to remove. Let's say how to remove. What are they called letters? After number. Remove what the. Remove anything after number. A1 is exactly what we want. Okay, string value. Python. Remove numbers from string. How to remove letters after number. Characters. That's the word I would put it more. So split. I think I was going to answer it the first one. How do I remove a sub string from the end of a string? How to remove characters after number. Use it. Okay, I know it's the string on split. I just need a little fresher. Needle or fresher. So what is it? One. So split on your subrider at most. Take the first piece. One of the first one is there. Okay, I got it. So they're just saying it's separation. Perfect. So let's go ahead and say contract size again. Contract size equals and then we'll say split set or whatever they put. We'll put it as a space and we'll just separate contract size. And we'll say separate. And then we'll say one. Not quite sure what that does, but it's just working. String object is not all open. Oh, if you get the idea, put it out on text.split. Maybe it's contract size. There we go. Very nice. Okay, now let's turn that into an integer. So let's say contract size equals hint contract size. And then oh, not it. Let's do float. Because it needs to be multiple. Okay, perfect. So now we have the contract size. We can then say contract size. Let's get the bid ask. So ask bid. And then for the symbol. And then the ask is there, but the bid is there. So we should get the bid and bid times contract size. Right? This is the bid. And if we go here, the bid is the price people pay right now. So bid times contract size, which we just found, is the same as this equation. And let's say USD per contract equals that. So USD per contract is that. And let's print USD per contract. And these two numbers should be the same. If this same, we are ballin and we are off to the races. All right, that's good enough for me. That is good enough for me 5.87 and 5.86. Okay, perfect. So we did the first thing. And the first thing was to figure out how much one contract was. And we'll just put a done there. And now we need to pull in the leverage being used. And we're going to think how we're going to do this. Okay, we're going to set leverage actually. So we will tell it how much to use. So let's go ahead and pass that in as well. Leverage. Leverage equals leverage. And I think we have a leverage up here. 10. I actually want to bring it down a bit. This bot that I'm thinking about deal Dean is going to be based off of smaller leverage. So set leverage. So we'll say set leverage. There we go. Mix that set leverage. I have that somewhere. This is what I love about coding. It's just that once you do it once, you don't really think about it again. And if you do have to think about it, that's okay because it's all on Google. So leverage and symbol. If you mix that set leverage. Okay, so that will set the leverage. And if we set the leverage. To that, to whatever we pass in. Set leverage. And then divide. Okay, divide leverage. Let's say divide leverage. Divide contract size. By leverage. To get USD cost. Right? Because one right here actually cost me 59 cents because I have 10X leverage. And let's test this actually with a... Well, I changed my leverage to 5. So one should actually be twice that. So like $1.18 or something. So. Let's say leverage. I said right here contract size. So contract size. USD per contract. You get rid of this for now. Just leave it. USD per. Divide it by leverage. Equals. Cost. What is that equals? That equals the cost, okay? So cost. And then let's print. Cost. Okay, so 5.88 divided by. 5. Let's go ahead and test it out. Let's say 5 contracts. Oh, we just have one contract. So that's perfect. You can see 5.88 right here. And then the cost is 1.18. So that's exactly what this is. 5.88 and 1.1769 round up 1.18. So with all of that being said. We want to be like, okay. Well, how much USD do we want to spend? How much USD do we want? So we should probably pass in. USD, USD. Amount. Let's say size USD. And we have to pass that one in. Well, it was just equals size USD. I just need to remember to always pass that one in. And size USD. Let's put that up here for now. But I'm going to always pretty much pass that one in. I'm going to say 1000. Because that's what we want to do. We want to be able to say, hey, with this function. We want to be able to pull in the leverage and then calculate. So I don't need to write that. But let's say size USD. So I'll just type in size USD right here. And if we want 1000 equals so that would equal 1000. So this equals 1000 for now. I'm just thinking this through with you. And if we want 1000 USD. And the cost per one is that per one. So we want to be able to use that for contract with leverage. The longest name ever. Cost per contract with leverage. So size USD divided by that is contracts needed. I know these are the grossest names ever. But I'd rather make it super clear for both of us. So, say, if we want blank USD in symbol. Sheesh. Blank contracts are needed. Then contracts needed. And this is going to be so you, I'm excited for this. This is going to be so useful. I'm building a really cool bot right now that needs to know. It needs to balance it out on both sides. So the two-sided bot needs to make sure to buy the same amount on both sides different tickers. So, we'll hit for you. I'll try to share this stuff in the discord. If we want blank USD. So, what do we call that? USD per contract? Size USD. I'm so excited that we finally finished this one because this is going to be so useful in so many of my albums. Any time that you have to trade two pairs of the same amount. If you're doing any sort of arbitrage or whatnot. This is going to be super helpful. If we want that many USD in this symbol, then blank contracts needed. So, let's print that out. And I don't want to print anything else out. And I'm just going to test it against the actual, the Phoenix. Let's run it. If we want one thousand USD in ETH USD, then 850 contracts are needed. That's wrong. Okay. It's not wrong. It's not wrong. 850. 849 is way closer. 849. 847. 846. So, it's not wrong. I mean, it's wrong, but not far off. So, I think I just need to improve my map. Because it's a little bit off. So, size USD. This is a cost for contract for the left leverage. Let's see what that is again. So, it's 117.67. And if I do that here, it's 118. Hmm. It's odd. Say, round, cost for contract for the left, and make it like three decimal places. See how that does? If that changes anything here. So, 117.177. So, 849, that's actually better. It's closer at least. Let's do round to the second. Because maybe they round. 118.17. Okay, that's looking better actually. I think they round. So, 847. 847.103. Could we get closer? Yeah, we could do five. I guess you can't probably see this, but the cost is 1001. I think I'm going to do it based off of the ask, then. Because if the answer is based off the ask, it's going to be different. I know we were already finished this, but like, I'm just trying to be perfect here. 847. 847. Man, I can't complain about that. I think what I'm going to do here is contract size. Contracts needed. Let's just make it an integer. And that should round it for pretty much. So, contracts needed equals an integer of that. And, what I should probably need that any would. So, we need 847 contracts. Hey, that's within $2. So, I think that's going to be good. And now I need to test this. So, contracts needed. We wouldn't need to return contracts needed for that. So, essentially, we can put in any symbol, USD size, and leverage. So, let's write that out. Call, funk, pass, symbol, USD size, and USD want it, and leverage. Okay? So, we'll do that. And now I can implement this into my other bot. If you want to see that other bot, let me know. It's going to be really, really great. It's a little bit of arbitrage, a little bit of machine learning. A lot of cool stuff. Let's go ahead and delete some of these notes, because somebody would roast the media the other day. But I have to make comments. Whatever. Don't care. Obviously, I do. I just deleted it, but I'm sorry. I'm sorry. I show you everything here. I'm slow. I want to think about this for a second. Let's pass in a different symbol. Let's pass in ADA, USD. Let's pass in 2000. Let's pass in. What was the other thing, leverage of 13, 14? I guess, because I can't type. And then let's see what it says. And if it works, then we just plop it into any bot, which is super dope. Okay. So, 46, if we want 2000 USD and ADA USD, then 4,347 contracts needed. So, let's test this out. And it should be with 2000. If I paste it in there, it's 2013. So, it's close, but I wonder where we can make this even more, I get super close. It's close enough, probably. But the thing is, I would rather be perfect. Because if you're doing arbitrage, you want it to be the same USD amount. I think this is close enough, I'm going to use it. But I'm also going to think about it a little bit. This works now, but it's a few dollars off. Need to think about how to make this even better. I don't know if it's a rounding error or what. But it looks like we grab the dictionary, we get the IDs, the values, the info, the contract size. Okay. So, you got the contract size, and then we're multiplied by the ask in the bid. Maybe something going on there, but... Nah. What's this contract size coming from? Float. Maybe if I rounded this. No, because we need that full thing, can't be round. It's the actual contract size. Set leverage. Leverage. Leverage. I think this is solved for now. I'm going to start using one of my bots. I'll maybe build that here on YouTube. But you know where to find me if you want to see that. So, let me know if you want to see more. See you in the next one. So, we're going to go ahead and build a liquidity sniping bot that pretty much removes the obstacle of slippage in your trading. Now, essentially what it's going to do is it's going to look at what the liquidity is like on each side on the bid and the ask. So, if it's in a buy order and it's trying to sell, you can see it says 4 here. Actually, I should probably zoom way in so you can see this. But here's the order book. Let's do that one more. Here's the order book. You can see 27,000 here, 600 on the bid, 25,000 on the ask. So, the max it would buy is what's on the ask. And if it was selling, then the max it would sell is what's on the bid. So, you can see it changes super quickly. So, this is going to be tricky. But I've needed this for a long time in a couple of my bots that maybe have two bigger size and I need to get in and out a little more elegantly instead of it. If you try to exit something like 50,000 size right now, it might go all the way up to 1175 or like three or four notches up or even higher depending on what you're trading. So, I've been needing this for a long time so I'm going to go ahead and build this out here with you. And essentially, let's go ahead and look at the import first. You can see here the imports I use, if you want to screenshot this real quickly, I know I'm kind of jumping into a function of a trading bot right now. But if you just hang around and watch, you'll see how it works. And then you can use it in your bots or however you'd like. But you can see, these are the imports. These are the inputs. Not all of these are very necessary for this. And then this is the connection to the max through CCXT. Now let's just make a function here. Def, liquidity, let's do lick, smiper, color this, and then let's explain it. This will return an order size to make dependent on the lick that is on the ask for the bid. And then what this does is it just allows you to get in and out more elegantly without having to have huge slippage. So, it's going to be super helpful for all of my bots move forward. I'll keep that up there. And then what we can do is we can actually use this function right here that says ask bid and we just pass them the symbol. And that function is going to give us the ask for bid and the order book. So let's just say order book equals ask bid and then pass them the symbol. And then we can print the order book just to see what it looks like. And from there we'll be able to figure out exactly how to pick this up. I didn't actually run it and I was running something else down here. It has marked that up now. And let's go ahead and try that again. So lick, smiper, let's put a time dot sleep here. So we don't go any further. Okay, perfect. There's the order books. This looks to be... It's supposed to be the bid. It's the ask. Let's go ahead and open this up a little bit so we can see the bid better. So this must be the price and this is the volume of what's on the order. So let's separate both of those out. How would we do that? Well... We have this that shows us we just go into the order book and we ask them for the bid. As you can see here, somewhere in this order book, see if we can find it. You can see here it says bid. So we go into the zero position, zero position, and then we look at bid. I'm sorry, the way around bid is in zero zero. So now that we have the order book here, we could say order book. We should say bid on liquidity on bid. Lick on bid equals it would be the order book, right? So we jump into the order book, we see here, and we would put in bid. So we just type in bid here. Bid. And then if this gets the bid, let's see here. Ask bid symbol. Oh, I see what's going on. I'm getting the ask in a bid because I'm returning the whole function here. So that's why I say ask bid order book. So I'm actually looking at a dictionary inside of like this, I guess, a little, a return symbol. So I get the ask in the bid. That's why it shows ask right here and the bid right here. And then it shows me the whole order book here. So in order to get this, what I want, this number right here, which is the amount of volume or liquidity on the bid, the earliest bid, well, I would do something similar to this, but I think it's going to be a one. It might be the other one. I hope you get the check. Let's go ahead and fix this order book would be the second position. Well, this is this way. Oh, book with two order book info. And then let's say order book info at the zero position is the ask. And then the bid is OB info at the one position. And then the OB, which is the order book, is OB info at the two position. And you can see that by this function right here for turning zero, one. Okay. So now just change this, put this somewhere else. Like it, that's fine. And then the bid liquidity bid lake should be that. I don't know the, we'll go ahead and just run that really quickly. Oh, print bid lake like this. And let's bring this down. Looks a little better. Okay, cool, cool, cool. Let's go ahead and run it and see what happens. We should get the liquidity unless I mix this up. It could be one zero. Okay, one thousand, it says. And here inside of this, yep, look, I got so bid. It says one thousand here. And it also says one thousand here, meaning I got the volume. Now, let's go ahead and test this again. But let's look at the actual lives data. So what are we, what are we looking at? We're looking at this right here on the bid. So it says 600 right now. Let's see what it says. It says 600. So you can see it now it gets the exact liquidity on the bid. So I'm probably going to use this in the manner of, hey, okay, now I know 600 on the bid. That is exactly what I can buy or sell. So if I'm like entering a position, I would just, if I wanted to enter as a market position, of course, if it's a limit position, this is kind of pointless, right? There's no need for liquidity sniper. You can just sit on the bid or the ask if I wanted to enter here in a position on a long. I would just sit here. But for some strategies, you want to enter on market orders. And if I'm entering on market order and I try to buy too much here, I might end up buying at the price and there might be huge slippage. So the reason we're building this is so I can just buy on the, buy on the ask, buy on the bid. So now that we have the bid link, I want to go ahead and say ask, click and then say OB, pretty much the same thing, but asks. And then zero, one, one. And let's go ahead and say, F, put the little curly's around it. So bid, lick is that, like that. And then ask, lick is this. And then I'm going to go ahead and return, ask, lick, sheesh, and bid, lick. And now I have a function that I can just say, hey, let's loop until, you know, exposition is all, but only get on the bid, buy on the bid. So let's go ahead and run this. All right. So you see the bid link? Was that? Let's try this again and keep our eyes peeled on the right, over here. So it should be 2.55, 3.55, good, 600. Awesome. So this works great. So how do we go ahead? What do we do next? This was awesome. The cleanest sniper. So this gives us the ask, lick, and the bid, lick. And then what if we want to buy something? Okay. So maybe we want to build this in a way like this, where essentially I could say, hey, I pass in the size, and then we pass in the size. So if we have a size of, say, like, $10,000 or something, well, I would pass in the size. I mean, let's first pass in the symbol. Symbol equals symbol, size equals size. So we pass in the size, and if this was the buy amount, $10,000, and we run this, and we see that we're trying to buy, so we have to buy on the ask, we see that, okay, that's actually quite a bit. But if this was like 200, we'd have 5 max 200 at the time. So we pass in the size, and then we pass in the symbol, pass in the symbol, pass in the size. Okay. I think that's good. And this gets the symbol here inside the side. It's also passing the execute, execute equals false, because sometimes we want to execute, sometimes we don't. So let's say if execute equals truth, we also need to pass in the buyer. Trying to think if it's better to put in this function, or put in this function. Let's say let's just do, buy equals truth, pass in buy equals truth, if false, it equals, and then pass in execute, pass in execute, as truth, the fault is false. So this is going to allow us to just say, hey, we only want to execute. Sometimes, sometimes, I just want to return it and execute it. So let's, inside this execute, let's say if, what did I call that? Buy, buy equals truth, buy equals truth, then we create the order. So we want to create order. It's pretty easy to do. Let's go ahead and see here. I would use create limit, and then let's go ahead and say this. Say feed max. Next dot. Create limit by order. And then we just pass in the symbol. Not create limit, create market. So one of this, create market by order, and we toss in the symbol, and the size. But since it's a buy, we want the ask leg, because this is a liquidity on the ask. Okay. That seems very good to me. We're going to have to loop this though. And I wanted to loop into a different function. Or not into a different function, but I wanted to loop and grab the data every time. So we want this whole function. I'm going to put this in a different function. Actually, I'll probably just throw this in the bot, like this kind of execution. Let me just tell you what I'm going to write. In case you want to close it out. But I'm going to put this into the actual bot section, because I think this is the important part of the liquidity sniper. Now I just make a wall loop. So make a wall loop. And check liquidity sniper. Okay. So make a wall loop. Check. Lick sniper every loop. And then place an order. Every loop. Tell filled. Tell sizes filled. So that's what I built. And now that I have this liquidity sniper here, I can just do that. Let's see here. I'm going to turn by and execute the off. Because I don't think that's needed anymore. And you know what? I could go ahead and just put this into my ask bid function. Yeah, I'm going to do that. I'm going to do that. Okay. So this is what we're going to bring this up here. And I'm going to post it down here. Because this ask bid is kind of one of my go-to's. I just get to ask in a bid. And that gives me the most kind of price. But this could also give me the bid liquidity at the same time on one singular call. So since I call this throughout my code in multiple places, now I've just beefed it up. So I'm not only getting the bid in the ask, but I'm giving the liquidity on the bid in the ask. So then I can return ask, lick, can buy, lick. Bid lick. Like that. And I have a new function that essentially gets bid in ask. Okay. So this function gets the bid and ask. And then new, because I need to implement all my other bars, new is also gets the liquidity. And then new is also gets the bid in the ask. So I can snipe. Perfect. So now in this liquidity snipe, I could actually just go ahead and make that wall of, I think about it. Okay. So let's go ahead and delete all this. And the lick sniper would pass in the size, for sure, the symbol of the size. The symbol of the size, and then it would just loop. It would just loop. So size equals that. And then a wall of size. I would grab position info. And the size of the position. And we would loop. While position size is less than size. So while position size is less than size. Prin. We are continuing to enter. I don't know if it's longer or short yet, but let's get the position info. Position info. Oh, I don't have it anyway. This calver OB and nice folks position info. Open positions. It's not going to work. Well, let's go back here and just write that out real quick then. Let's go ahead and see position info. I do have that somewhere. Let's go ahead and see here. Oh, there it is. Found it somewhere. Okay, let's just grab position info and throw this function here and here. And I'll let you pause it for like a second or two so you can do what you need to do. Do what you need to do with it. I don't know if it's going to work right away. I might have to make some tweaks, but put it right there. Okay, fetch balance, ramps, makes a dictionary. Okay, I'm going to give you like three seconds if you really want to go. This gets all my position info. Okay, there's the top part. One, two, three. And then use a lot of art. One, two, three. And then I'll show you how it works because you need to get the position info. So let's go ahead and say position, size equals position info size. So zero, one, two. Okay. So position size equals position info to that should work. And while position size is smaller than size, we are entering. And I'm not going to return anyth