 Hello world, it's Siraj and I built a crypto trading bot with chat GPT and gave it $2,000 to trade with and in this video I want to show you how I built this crypto trading bot and I want to show you whether or not I made money or lost money. So at the end of the video you'll find out if my $2,000 investment of Bitcoin as you can see here made money or lost money after 24 hours of live trading. So let's ask you our first question, what are the top 10 strategies for using a large language model in the financial markets specifically for cryptocurrencies. Now normally we would ask chat GPT for a list of different machine learning techniques like linear regression or random forests or logistic regression to take some data, train a model and then output a prediction. But now that large language models like chat GPT are so prevalent there is a new paradigm emerging of using prompt engineering instead of traditional machine learning to make predictions. And what you can see here are all of these different prompt engineering techniques that we could be using with chat GPT like question answering and sequence prompting. So let's pick number five, let's use the question answering prompt. We want to give chat GPT a bunch of data and then ask it a question, that question is, what is the price of Bitcoin going to be tomorrow based on this data? Use number five and show me the Python code for this to predict the price of Bitcoin. Only use the open AI and coin gecko Python libraries to do this, less than 10 lines of code please. So that's the next strategy here. Now we can take this code, copy it, paste it into Google Colab and run it. And when we run it we can see the past 30 days of Bitcoin, we give it to it. Based on the past 30 days of Bitcoin you should buy Bitcoin today. And that's a good first step. But what we want to do is we want to diversify this a little bit. We want the price of chain link, Ethereum, Solana, pre-search and I started running a pre-search note recently to support decentralized search so I hope it earns me some research in particular. So instead of asking it for just Bitcoin, let's ask it for five different cryptocurrencies. And in addition to that, what other news data sources can we use for the script trading bot? Please add the past 30 days of Twitter sentiment around those cryptocurrencies as well as the past 30 days worth of news articles and use a database to store a history of your predictions. Use that as well for training data. It's using the SNS scrap library to pull the latest tweets from Twitter. It's using the news API to pull the latest news on those five cryptocurrencies as well. And Pinecon will initialize a new vector database with the name trading bot. There's a new type of database and that's called a vector database. And these are very popular for large language models like chat GPT because what they do is instead of storing all the different rows and columns of your data in detail, it stores the learnings from that data in terms of the weights that were learned. And so think of this as like a compressed version of the initial data. And the difference between the predictions that it makes now versus the predictions that it makes earlier, I'm calling the vector delta. And I want that vector delta to be as small as possible. That means that I don't want the new trade that you make, chat GPT to be way too different than the previous trade. And that just prevents volatility. So now when we run this in Google Colab, we can see that it's outputting one of several cryptocurrencies that we can trade every single day based on the predictions, based on Twitter and the news and all of this different data, decentralized news. Build a bot so lit, algorithm so fit in the back of the blockchain with my code base. I don't trust any of these models that I see. Those it buy corporations all about hugging face. So how do we improve on this? How do we make this even more advanced? Not only do we want it to output a trade to make, we want it to then execute that trade. So let's ask it for a more advanced prompt. So this brings us to the next prompt. I want it to execute one of five Python commands by crypto at a given price or as a limit order, sell crypto or sell it as a limit order or do nothing given historical data, news headlines and Twitter data and a vector delta, which represents how similar your trade was now to last time. We don't want it to be more than 0.9 if it is do nothing. And I want it to run every 30 minutes. Please show me the prompt for this and add the alpaca API to make a trade for each function described. It's going to output a giant prompt and this giant prompt is going to execute one of five different trades. It's going to give it a role and that role is going to be you are in charge of a crypto trading portfolio. You need to execute one of these five different trades based on the data that you've been given it inside of the prompt and you can see that it's giving it the variables for all of the data like the Twitter data, like the news data, like the vector delta from the past history using pine cone. All of these things are fed into the model in the form of a single prompt and then it will output a single function to execute using the alpaca API. Now that we have this trading bot working in a single Google collab notebook, how do we have it run consistently? So we want it to have it run every single hour and to either make a trade or to do nothing based on the data that it's given. So the way that we're going to do that is we're going to deploy it to this website called Python anywhere and Python anywhere was created by the same people who made anaconda, which is the popular Python tool for dependency management. And under Python anywhere, we'll go to files and we'll just upload our dot pie file right there and it's going to execute once a day. So that's for free. If we want to pay them $5 a month, then we can execute it every hour. So I'm going to pay $5. You don't have to do that. You can just have it run once a day. But once I pay, I'll have this dot pie file. So I took the entire Google collab and I fit it into a single dot pie file. It's going to run every single day. I'm going to say at every hour, I can specify it right here. It's going to either buy or sell crypto based on what it thinks. So let's give it 24 hours and come back and see if I made any money. So it's been 24 hours and my bot has a .41% loss, which isn't the best thing, but it's okay because my pre-search node is going to offset those losses. If you like this video, please hit the like button. It really helps promote the video and check out pre-search for decentralized search. And until next time, happy automated trading.